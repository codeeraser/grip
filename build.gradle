apply plugin: 'groovy'
apply plugin: 'application'
version = '0.1'
mainClassName = 'de.metacode.grip.Grip'


repositories {
    repositories {
        maven  {
            url "http://repo1.maven.org/maven2"
        }
    }
}

configurations {
    ivy
    all*.exclude group: 'xml-apis'
    all*.exclude group: 'xerces'
}

dependencies {
    compile 'org.codehaus.groovy:groovy-all:2.4.0'
    compile 'commons-cli:commons-cli:1.2'
    compile 'org.reflections:reflections:0.9.9-RC1'
    compile 'org.slf4j:slf4j-api:1.7.7'
    compile 'hsqldb:hsqldb:1.8.0.10'
    compile 'javax.mail:mail:1.4'
    compile 'org.apache.poi:poi:3.11'
    compile 'org.quartz-scheduler:quartz:2.2.1'
    compile 'org.apache.poi:poi:3.11'
    compile 'org.codehaus.gpars:gpars:1.2.1'
    compile "org.apache.ivy:ivy:2.4.0"
    compile "org.apache.ant:ant-jsch:1.8.4"
    compile "ch.qos.logback:logback-classic:1.1.3"
    compile "ch.qos.logback:logback-core:1.1.3"
    compile "ch.qos.logback:logback-access:1.1.3"
    compile "com.opencsv:opencsv:3.5"
    compile "org.asciidoctor:asciidoctorj:1.5.2"
    compile "com.craigburke.document:pdf:0.4.6"
    compile "com.craigburke.document:word:0.4.6"
    compile "javax.servlet:javax.servlet-api:3.0.1"
    ivy "org.apache.ivy:ivy:2.4.0"
    testCompile 'junit:junit:4.12'
}

tasks.withType(GroovyCompile) {
    groovyClasspath += configurations.ivy
}

task uberjar(type: Jar, dependsOn: [':compileJava', ':compileGroovy']) {
    from files(sourceSets.main.output.resourcesDir)
    from files(sourceSets.main.output.classesDir) //needed for reflections-api
    from files(sourceSets.main.allSource)
    from configurations.runtime.asFileTree.files.collect { zipTree(it) }

    manifest {
        attributes 'Main-Class': mainClassName
    }
}

sourceSets.main.resources.srcDirs 'src/main/groovy'
sourceSets.test.resources.srcDirs 'src/test/groovy'


apply plugin: 'idea'

idea {
    project {
        languageLevel = '1.8'

        modules.each { m ->
            m.downloadSources = true

            if (rootProject.subprojects.find { s -> m.name == s.name }) {
                // use same output dirs as gradle
                m.inheritOutputDirs = false
                File bd = new File(m.contentRoot, "build");
                m.outputDir = new File(bd, "classes/main")
                m.testOutputDir = new File(bd, "classes/test")
            }
        }
    }
}